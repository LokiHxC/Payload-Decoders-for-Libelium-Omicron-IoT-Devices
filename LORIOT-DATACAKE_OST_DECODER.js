/*
    ------------- Omicron Smart Tracking Device Decoder Payload -------------

    "Explanation: This code is for Omicron Smart Tracking developed by Voxcom. 
    It extracts the tiny frame generated by the Omicron hardware in Datacake
    and decodes the data into a JSON string for general purposes."

    Copyright (C) 2024 Vox Comunicaciones S.A.
    http://www.voxcom.cl

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
     * Version: 1.0
     * Design: Francisco Cornejo Contreras
*/


function Decoder(bytes, port) {
    var data = bytes.map(function(byte) {
        return ('00' + (byte & 0xFF).toString(16)).slice(-2);
    }).join('');

    console.log('Data input:', data);
    
    var decoded_data = decodeData(data);
    console.log('Decoded data:', decoded_data);

    return {
        "Status_Sensor": decoded_data.Status_Sensor.value,
        "Alarma_Geocerca": decoded_data.Alarma_Geocerca.value,
        "Pasos": decoded_data.Pasos.value,
        "gps": decoded_data.gps,
        "Vpanel": decoded_data.Vpanel.value,
        "Pbat": decoded_data.Pbat.value
    };
}

function decodeData(data) {
    var lectura = parseInt(data.substring(0, 2), 16);
    var est = (lectura & 0x80) > 0 ? 1 : 0; // Sensor Status: Cut off or set
    var alarma = (lectura & 0x40) > 0 ? 1 : 0; // Geofence Alarm
    var pasos = parseInt(data.substring(1, 4), 16) & 0x0FFF; // Animal steps

    var lat_hex = data.substring(4, 12);
    var lon_hex = data.substring(12, 20);
    var lat_f = HexToFloat32(lat_hex);
    var lon_f = HexToFloat32(lon_hex);

    var gps = (lat_f != 0 && lon_f != 0) ? { "value": 1, "lat": lat_f, "lng": lon_f } : null;

    var Vpanel = parseInt(data.substring(20, 22), 16) / 10; // Panel Voltage
    var Pbat = parseInt(data.substring(22, 24), 16); // Percentage of Battery

    var decoded_data = {
        "Status_Sensor": { "value": est },
        "Alarma_Geocerca": { "value": alarma },
        "Pasos": { "value": pasos },
        "gps": gps,
        "Vpanel": { "value": Vpanel },
        "Pbat": { "value": Pbat }
    };

    return decoded_data;
}

function HexToFloat32(str) {
    var int = parseInt(str, 16);
    if (int > 0 || int < 0) {
        var sign = (int >>> 31) ? -1 : 1;
        var exp = (int >>> 23 & 0xff) - 127;
        var mantissa = ((int & 0x7fffff) + 0x800000).toString(2);
        var float32 = 0;
        for (var i = 0; i < mantissa.length; i += 1) {
            float32 += parseInt(mantissa[i]) ? Math.pow(2, exp) : 0;
            exp--;
        }
        return float32 * sign;
    } else return 0;
}